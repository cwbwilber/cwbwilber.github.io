<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaIO流</title>
    <url>/2022/06/28/21-01-09/Java/JavaIO%E6%B5%81/</url>
    <content><![CDATA[<h1 id="Java-IO流"><a href="#Java-IO流" class="headerlink" title="Java IO流"></a>Java IO流</h1><h2 id="什么是IO流"><a href="#什么是IO流" class="headerlink" title="什么是IO流"></a>什么是IO流</h2><p>通过IO操作可以完成硬盘文件的读写</p>
<p><img src="/../../images/IO%E6%B5%81/%E4%BB%80%E4%B9%88%E6%98%AFIO.png" alt="什么是IO"></p>
<h2 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a>IO流的分类</h2><h3 id="按照流的方向进行分类（输入流、输出流）"><a href="#按照流的方向进行分类（输入流、输出流）" class="headerlink" title="按照流的方向进行分类（输入流、输出流）"></a>按照流的方向进行分类（输入流、输出流）</h3><p>以内存作为参照物</p>
<ul>
<li>  往内存中去，叫做输入（Input），或者叫做读（Read）</li>
<li>  从内存中出，叫做输出（Output），或者叫做写（Write）</li>
</ul>
<h3 id="按照读取数据方式不同进行分类（字符流、字节流）"><a href="#按照读取数据方式不同进行分类（字符流、字节流）" class="headerlink" title="按照读取数据方式不同进行分类（字符流、字节流）"></a>按照读取数据方式不同进行分类（字符流、字节流）</h3><ul>
<li><p>  按照字节的方式进行读取数据，一次读取1个字节byte，等同于一次读取8个二进制位。这种流是万能流，什么类型的文件都可以读取，包括：文本文件、图片、声音、视频…</p>
</li>
<li><p>  按照字符的方式读取数据，一次读取一个字符，这种流是为了方便读取普通文本文件而存在的，这种流不能读取：图片、声音、视频等文件。只能读取纯文本文件。</p>
</li>
</ul>
<h2 id="Java-IO流四大家族"><a href="#Java-IO流四大家族" class="headerlink" title="Java IO流四大家族"></a>Java IO流四大家族</h2><ul>
<li><p>  <code>java.io.InputStream</code> 字节输入流</p>
</li>
<li><p>  <code>java.io.OutputStream</code> 字节输出流</p>
</li>
<li><p>  <code>java.io.Reader</code> 字符输入流</p>
</li>
<li><p>  <code>java.io.Writer</code> 字符输出流</p>
</li>
</ul>
<p>四大家族的首领都是抽象类（abstract class）</p>
<p>所有的流都实现了<code>java.io.Closeable</code>接口，都是可以关闭的，都有<code>close()</code>方法</p>
<p>所有的输出流都实现了<code>java.io.Flushable</code>接口，都可以刷新，都有<code>flush()</code>方法</p>
<p><strong>注意：在Java中只要”类名”以Stream结尾的都是字节流，以Reader/Writer结尾的都是字符流</strong></p>
<h2 id="Java-io包下常用的流"><a href="#Java-io包下常用的流" class="headerlink" title="Java.io包下常用的流"></a>Java.io包下常用的流</h2><ul>
<li><strong>文件专属</strong><ul>
<li>  java.io.FileInputStream</li>
<li>  java.io.FileOutputStream</li>
<li>  java.io.FileReader</li>
<li>  java.io.FileWriter</li>
</ul>
</li>
<li><strong>转换流（将字节流转换为字符流）</strong><ul>
<li>  java.io.InputStreamReader</li>
<li>  java.io.OutputStreamWriter</li>
</ul>
</li>
<li><strong>缓冲流专属</strong><ul>
<li>  java.io.BufferedReader</li>
<li>  java.io.BufferedWriter</li>
<li>  java.io.BufferedInputStream</li>
<li>  java.io.BufferedOutputStream</li>
</ul>
</li>
<li><strong>数据流专属</strong><ul>
<li>  java.io.DataInputStream</li>
<li>  java.io.DataOutputStream</li>
</ul>
</li>
<li><strong>标准输出流</strong><ul>
<li>  java.io.PrintWriter</li>
<li>  java.io.PrintStream</li>
</ul>
</li>
<li><strong>对象专属流</strong><ul>
<li>  java.io.ObjectInputStream</li>
<li>  java.io.ObjectOutputStream</li>
</ul>
</li>
</ul>
<h3 id="字节输入流FileInputStream"><a href="#字节输入流FileInputStream" class="headerlink" title="字节输入流FileInputStream"></a>字节输入流FileInputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 15:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：使用FileInputStream读取文件（可以读取任何文件）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStreamTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">          	<span class="comment">// 每次读取的字节数</span></span><br><span class="line">            <span class="type">int</span> readCount;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">16</span>];</span><br><span class="line">            <span class="keyword">while</span> ((readCount = in.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, readCount));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 在finally中确保流一定关闭</span></span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字节输出流FileOutputStream"><a href="#字节输出流FileOutputStream" class="headerlink" title="字节输出流FileOutputStream"></a>字节输出流FileOutputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 16:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：使用FileOutputStream写入文件（可以写入任何文件）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStreamTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这种方式会将源文件清空在写入</span></span><br><span class="line">            <span class="comment">// out = new FileOutputStream(path);</span></span><br><span class="line">            <span class="comment">// 以追加的方式写入文件</span></span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            out.write(<span class="string">&quot;wilber&quot;</span>.getBytes());</span><br><span class="line">            <span class="comment">// 刷新</span></span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 在finally中确保流一定关闭</span></span><br><span class="line">            <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符输入流FileReader"><a href="#字符输入流FileReader" class="headerlink" title="字符输入流FileReader"></a>字符输入流FileReader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 17:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：使用FileReader读取文件（只可以读取文本文件）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReaderTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">4</span>];</span><br><span class="line">          	<span class="comment">// 每次读取的字符数</span></span><br><span class="line">            <span class="type">int</span> readCount;</span><br><span class="line">            <span class="keyword">while</span> ((readCount = reader.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(chars, <span class="number">0</span>, readCount));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 在finally中确保流一定关闭</span></span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符输出流FileWriter"><a href="#字符输出流FileWriter" class="headerlink" title="字符输出流FileWriter"></a>字符输出流FileWriter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 19:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：使用FileWriter写入文件（只可以写入文本文件）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriterTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">            <span class="comment">// 刷新</span></span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 在finally中确保流一定关闭</span></span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="缓冲流BufferedReader"><a href="#缓冲流BufferedReader" class="headerlink" title="缓冲流BufferedReader"></a>缓冲流BufferedReader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 20:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：带缓冲区的输入流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReaderTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓冲流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 当一个流的构造方法中需要一个流的时候，这个被传进来的流叫做“节点流”</span></span><br><span class="line"><span class="comment">             * 外部负责包装的这个流，叫做“包装流”，还有一个名字叫做“处理流”</span></span><br><span class="line"><span class="comment">             * FileReader就是节点流</span></span><br><span class="line"><span class="comment">             * BufferedReader就是包装流/处理流</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader);</span><br><span class="line">            String s;</span><br><span class="line">            <span class="keyword">while</span> ((s = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭流的时候只需要关闭包装流，节点流由包装流在内部关闭</span></span><br><span class="line">            <span class="keyword">if</span> (bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="缓冲流BufferedWriter"><a href="#缓冲流BufferedWriter" class="headerlink" title="缓冲流BufferedWriter"></a>缓冲流BufferedWriter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 20:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：带缓冲区的输出流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedWriterTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓冲流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bufferedWriter = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">            bufferedWriter.write(<span class="string">&quot;cwb.wilber =&gt; ....&quot;</span>);</span><br><span class="line">            bufferedWriter.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bufferedWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bufferedWriter.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转换流InputStreamReader"><a href="#转换流InputStreamReader" class="headerlink" title="转换流InputStreamReader"></a>转换流InputStreamReader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 20:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：字节输入流转字符输入流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReaderTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓冲流 + 转换流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 字节流</span></span><br><span class="line">            <span class="comment">// FileInputStream in = new FileInputStream(&quot;test.txt&quot;);</span></span><br><span class="line">            <span class="comment">// 转换流(将字节流转换为字符流)</span></span><br><span class="line">            <span class="comment">// InputStreamReader reader = new InputStreamReader(in);</span></span><br><span class="line">            <span class="comment">// 缓冲流</span></span><br><span class="line">            <span class="comment">// bufferedReader = new BufferedReader(reader);</span></span><br><span class="line">            bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>)));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="转换流OutputStreamWriter"><a href="#转换流OutputStreamWriter" class="headerlink" title="转换流OutputStreamWriter"></a>转换流OutputStreamWriter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 20:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：字节输出流转字符输出流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedWriterTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓冲流 + 转换流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bufferedWriter = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.txt&quot;</span>)));</span><br><span class="line">            bufferedWriter.write(<span class="string">&quot;cwb.wilber =&gt; ....&quot;</span>);</span><br><span class="line">            bufferedWriter.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bufferedWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bufferedWriter.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数据输入流DataInputStream"><a href="#数据输入流DataInputStream" class="headerlink" title="数据输入流DataInputStream"></a>数据输入流DataInputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 20:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：可以将数据按照类型读取出来，注意，读取的顺序和写入的顺序一样</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataInputStreamTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DataInputStream</span> <span class="variable">dataInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataInputStream = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data&quot;</span>));</span><br><span class="line">            System.out.println(dataInputStream.readByte());</span><br><span class="line">            System.out.println(dataInputStream.readShort());</span><br><span class="line">            System.out.println(dataInputStream.readInt());</span><br><span class="line">            System.out.println(dataInputStream.readLong());</span><br><span class="line">            System.out.println(dataInputStream.readFloat());</span><br><span class="line">            System.out.println(dataInputStream.readDouble());</span><br><span class="line">            System.out.println(dataInputStream.readBoolean());</span><br><span class="line">            System.out.println(dataInputStream.readChar());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dataInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dataInputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数据输出流DataOutputStream"><a href="#数据输出流DataOutputStream" class="headerlink" title="数据输出流DataOutputStream"></a>数据输出流DataOutputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 20:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：将数据按照类型写入到文件中，注意写入顺序，读取按照写入的顺序读取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataOutputStreamTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">dataOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataOutputStream = <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;data&quot;</span>));</span><br><span class="line">            dataOutputStream.writeByte(<span class="number">100</span>);</span><br><span class="line">            dataOutputStream.writeShort(<span class="number">200</span>);</span><br><span class="line">            dataOutputStream.writeInt(<span class="number">300</span>);</span><br><span class="line">            dataOutputStream.writeLong(<span class="number">400L</span>);</span><br><span class="line">            dataOutputStream.writeFloat(<span class="number">500F</span>);</span><br><span class="line">            dataOutputStream.writeDouble(<span class="number">600.0</span>);</span><br><span class="line">            dataOutputStream.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">            dataOutputStream.writeChar(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            dataOutputStream.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dataOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dataOutputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象输入流ObjectInputStream"><a href="#对象输入流ObjectInputStream" class="headerlink" title="对象输入流ObjectInputStream"></a>对象输入流ObjectInputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-30 14:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：将文件中的数据读取出来并转换为Java对象，同时，该对象的序列号ID应保持一致</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectInputStreamTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object&quot;</span>));</span><br><span class="line">            <span class="comment">// 将对象从文件中读取出来</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> inputStream.readObject();</span><br><span class="line">            <span class="comment">// 验证读取出来的Java对象是否是Student对象</span></span><br><span class="line">            System.out.println(o <span class="keyword">instanceof</span> Student);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象输出流ObjectOutputStream"><a href="#对象输出流ObjectOutputStream" class="headerlink" title="对象输出流ObjectOutputStream"></a>对象输出流ObjectOutputStream</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-30 13:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：将对象写入到文件中去，同时该对象应该实现Serializable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectOutputStreamTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个Student对象，该对象应该实现序列化接口</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setId(<span class="number">1001</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            outputStream = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object&quot;</span>));</span><br><span class="line">            <span class="comment">// 将对象写入到文件中去</span></span><br><span class="line">            outputStream.writeObject(student);</span><br><span class="line">            <span class="comment">// 刷新管道</span></span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p><strong>万物皆对象（File文件对象）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 23:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">        file = file.getAbsoluteFile();</span><br><span class="line">        System.out.printf(<span class="string">&quot;是否存在: %s\n&quot;</span>, file.exists());</span><br><span class="line">        System.out.printf(<span class="string">&quot;文件名: %s\n&quot;</span>, file.getName());</span><br><span class="line">        System.out.printf(<span class="string">&quot;绝对路径: %s\n&quot;</span>, file.getAbsolutePath());</span><br><span class="line">        System.out.printf(<span class="string">&quot;父路径: %s\n&quot;</span>, file.getParent());</span><br><span class="line">        System.out.printf(<span class="string">&quot;是目录: %s\n&quot;</span>, file.isDirectory());</span><br><span class="line">        System.out.printf(<span class="string">&quot;是文件: %s\n&quot;</span>, file.isFile());</span><br><span class="line">        System.out.printf(<span class="string">&quot;文件大小: %s\n&quot;</span>, file.length());</span><br><span class="line">        <span class="keyword">for</span> (File listFile : file.listFiles()) &#123;</span><br><span class="line">            System.out.println(listFile.getAbsolutePath());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="comment">// 如果不存在则新建文件</span></span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="comment">// 如果不存在则新建目录</span></span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拷贝文件及其拷贝目录"><a href="#拷贝文件及其拷贝目录" class="headerlink" title="拷贝文件及其拷贝目录"></a>拷贝文件及其拷贝目录</h2><h3 id="字节流拷贝文件"><a href="#字节流拷贝文件" class="headerlink" title="字节流拷贝文件"></a>字节流拷贝文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 16:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：使用字节流拷贝文件，可以拷贝任何文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          	<span class="comment">// 边读文件，边写文件</span></span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;dest.txt&quot;</span>);</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src.txt&quot;</span>);          	</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];	<span class="comment">// 每次读取的最大字节数          	</span></span><br><span class="line">            <span class="type">int</span> readCount;	<span class="comment">// 每次读取的字节数</span></span><br><span class="line">            <span class="keyword">while</span> ((readCount = fileInputStream.read(bytes)) != -<span class="number">1</span>) &#123;              	</span><br><span class="line">                fileOutputStream.write(bytes, <span class="number">0</span>, readCount);	<span class="comment">// 将读取的字节写入到文件中</span></span><br><span class="line">            &#125;          	</span><br><span class="line">            fileOutputStream.flush();	<span class="comment">// 刷新管道</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          	<span class="comment">// 输入和输出要分别关闭，防止其中一个关闭失败影响另一个流的关闭          	</span></span><br><span class="line">            <span class="keyword">if</span> (fileOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123; <span class="comment">// 关闭字节输出流</span></span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123; <span class="comment">// 关闭字节输入流</span></span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符流拷贝文件"><a href="#字符流拷贝文件" class="headerlink" title="字符流拷贝文件"></a>字符流拷贝文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 16:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：使用字符流拷贝文件，可以拷贝文本文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;	<span class="comment">// 字符输出流</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;		<span class="comment">// 字符输入流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;test copy.txt&quot;</span>);</span><br><span class="line">            <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>]; 	<span class="comment">// 每次读取的最大字符数</span></span><br><span class="line">            <span class="type">int</span> readCount;	<span class="comment">// 每次读取的字符数</span></span><br><span class="line">            <span class="keyword">while</span> ((readCount = in.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(chars, <span class="number">0</span>, readCount);	<span class="comment">// 将读取的字符写入到文件中</span></span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();	<span class="comment">// 刷新管道</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123; <span class="comment">// 关闭字符输入流</span></span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123; <span class="comment">// 关闭字符输出流</span></span><br><span class="line">                    out.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="拷贝目录"><a href="#拷贝目录" class="headerlink" title="拷贝目录"></a>拷贝目录</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-29 16:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：使用字节流拷贝目录，字符流拷贝目录实现方式一样</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">        copyDir(srcFile, destFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拷贝目录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcFile 源目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destFile 目标目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyDir</span><span class="params">(File srcFile, File destFile)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (srcFile.isDirectory()) &#123;</span><br><span class="line">            File[] files = srcFile.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (files == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">for</span> (File src : files) &#123;</span><br><span class="line">                <span class="comment">// 拼接源文件/目录对应的目标文件/目录</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> destFile.getAbsolutePath() + <span class="string">&quot;\\&quot;</span> + src.getName();</span><br><span class="line">                <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">                <span class="comment">// 如果当前的源文件是文件则直接拷贝文件</span></span><br><span class="line">                <span class="keyword">if</span> (src.isFile()) &#123;</span><br><span class="line">                    copyFile(src, dest);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果当前的源文件是目录则先创建出该目录，创建后递归执行目录拷贝</span></span><br><span class="line">                <span class="keyword">if</span> (src.isDirectory()) &#123;</span><br><span class="line">                    dest.mkdirs();</span><br><span class="line">                    copyDir(src, dest);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制源文件到目标文件的指定位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcFile  源文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destFile 目标文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(File srcFile, File destFile)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;          <span class="comment">// 文件输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;        <span class="comment">// 文件输出流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile);</span><br><span class="line">            <span class="type">int</span> readCount;                  <span class="comment">// 每次读取的行数</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];  <span class="comment">// 每次读取文件的最大字节大小</span></span><br><span class="line">            <span class="keyword">while</span> ((readCount = in.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(bytes, <span class="number">0</span>, readCount);</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();                    <span class="comment">// 刷新</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close(in);</span><br><span class="line">            close(out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Closeable关闭封装</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> closeable 待关闭的目标源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Closeable closeable)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (closeable != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                closeable.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件序列化和反序列化"><a href="#文件序列化和反序列化" class="headerlink" title="文件序列化和反序列化"></a>文件序列化和反序列化</h2><h3 id="序列化Serialize"><a href="#序列化Serialize" class="headerlink" title="序列化Serialize"></a>序列化Serialize</h3><p>将Java对象存储到文件中，将Java对象的状态保存下来</p>
<h3 id="反序列化DeSerialize"><a href="#反序列化DeSerialize" class="headerlink" title="反序列化DeSerialize"></a>反序列化DeSerialize</h3><p>将硬盘中的数据重新恢复到内存当中，恢复Java对象。</p>
<h3 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h3><p>Serializable起标识作用，Java虚拟机看到这个类实现了这个接口，可能会对这个类进行特殊待遇</p>
<p>Serializable这个标志接口是给Java虚拟机参考的，Java虚拟机看到这个接口以后，会为该类自动生成一个序列化版本号，同时应当注意，当类的结构发生改变时序列化版本号也发生改变，所以应该自定义序列号版本号。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-30 13:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6524586072314401522L</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="集合序列化"><a href="#集合序列化" class="headerlink" title="集合序列化"></a>集合序列化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-30 13:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectOutputStreamTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个Student对象，该对象应该实现序列化接口</span></span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1001</span>,<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1002</span>,<span class="string">&quot;李四&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1003</span>,<span class="string">&quot;王五&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1004</span>,<span class="string">&quot;赵六&quot;</span>));</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            outputStream = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.list&quot;</span>));</span><br><span class="line">            <span class="comment">// 将集合对象写入到文件中去</span></span><br><span class="line">            outputStream.writeObject(list);</span><br><span class="line">            <span class="comment">// 刷新管道</span></span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-30 14:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectInputStreamTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.list&quot;</span>));</span><br><span class="line">            <span class="comment">// 将对象从文件中读取出来</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> inputStream.readObject();</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h3><p>transient作用是让属性不参与序列化存储</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-30 13:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6524586072314401522L</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IO和Properties"><a href="#IO和Properties" class="headerlink" title="IO和Properties"></a>IO和Properties</h2><p>userinfo.properties（属性配置文件，以k=v存储数据）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 玮柏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022-06-30 15:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：读取properties的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOPropertiesTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;userinfo.properties&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建一个Properties集合</span></span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            <span class="comment">// 将数据加载到Properties中</span></span><br><span class="line">            properties.load(reader);</span><br><span class="line">            System.out.println(properties.getProperty(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">            System.out.println(properties.getProperty(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO流</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程</title>
    <url>/2022/06/29/11-32-52/Java/Java%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Java-多线程"><a href="#Java-多线程" class="headerlink" title="Java 多线程"></a>Java 多线程</h1><h2 id="什么是进程？什么是线程？"><a href="#什么是进程？什么是线程？" class="headerlink" title="什么是进程？什么是线程？"></a>什么是进程？什么是线程？</h2><blockquote>
<p>  进程是一个应用程序。(进程是一个软件)</p>
<p>  线程是一个进程中的执行场景/执行单元。</p>
<p>  一个进程可以启动多个线程。</p>
<p>  <strong>对于Java程序，当DOS命令窗口输入：java HelloWorld</strong> </p>
<p>  会先启动JVM，而JVM就是一个进程</p>
<p>  JVM在启动一个主线程调用main方法</p>
<p>  同时在启动一个垃圾回收线程复制看护，回收垃圾</p>
</blockquote>
<h2 id="进程和线程的关系"><a href="#进程和线程的关系" class="headerlink" title="进程和线程的关系"></a>进程和线程的关系</h2><blockquote>
<ul>
<li><p>进程A：</p>
<ul>
<li><p>  线程A-1</p>
</li>
<li><p>  线程A-2</p>
</li>
</ul>
</li>
<li><p>进程B：</p>
<ul>
<li>  线程B-1</li>
<li>  线程B-2</li>
</ul>
</li>
</ul>
<p>  进程A和进程B的内存独立不共享</p>
<p>  在Java语言中：线程A-1和线程A-2，堆内存和方法区内存共享，但是栈内存独立，一个线程一个栈</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2022/06/29/11-32-51/Java/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2022/06/29/11-32-51/Java/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
</search>
